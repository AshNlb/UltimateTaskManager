generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String
  name                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  buckets             Bucket[]
  chatHistory         ChatHistory[]
  tasks               Task[]
  passwordResetTokens PasswordResetToken[]
  aiSettings          AISettings?
}

model Bucket {
  id         String   @id @default(uuid())
  userId     String
  name       String
  color      String   @default("#3B82F6")
  orderIndex Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks      Task[]

  @@index([userId])
}

model Task {
  id          String    @id @default(uuid())
  userId      String
  bucketId    String?
  title       String
  description String?
  dueDate     DateTime?
  priority    String    @default("medium")
  status      String    @default("todo")
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bucket      Bucket?   @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bucketId])
  @@index([dueDate])
}

model ChatHistory {
  id        String   @id @default(uuid())
  userId    String
  message   String   @db.VarChar(1000)
  response  String   @db.VarChar(2000)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model AISettings {
  id            String   @id @default(uuid())
  userId        String   @unique
  assistantName String   @default("AI Assistant")
  tone          String   @default("professional")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
